require 'yaml'
require 'fileutils'

class Redsync
  class SyncStat
    include Enumerable

    def initialize(config, agent)
      @config = config
      @agent = agent

      @file = File.join(@config[:data_dir], "__redsync_stat.yml")
      FileUtils.touch @file unless File.exist? @file
      @stat = YAML.load_file(@file) || {}
    end


    def refresh
      puts "Refreshing pages list"
      page = @agent.get(@config[:wiki_base_url] + "/date_index")
      now = DateTime.now

      # Get remote and local update times from remote
      page.search("#content h3").each do |h3|
        links = h3.next_element.search("a")
        links.each do |link|
          url = @config[:url] + link.attr("href")
          name = URI.decode(url.match(/^#{@config[:wiki_base_url]}\/(.*)$/)[1]).force_encoding("UTF-8")
          local_file = File.join(@config[:data_dir], "#{name}.txt")

          remote_updated_at = DateTime.parse(h3.text + "T00:00:00" + now.zone)
          local_updated_at = File.stat(local_file).mtime.to_datetime
          if remote_updated_at.year == now.year && remote_updated_at.month == now.month && remote_updated_at.day == now.day
            remote_updated_at = history(name)[0][:timestamp]
          end

          update(name, {
            :name => name,
            :url => url,
            :local_file => local_file,
            :remote_updated_at => remote_updated_at,
            :local_updated_at => local_updated_at,
          }, true)
          update(name, {
            :downloaded_at => local_updated_at
          }, true) unless self.for(name)[:downloaded_at]
        end
      end

      # Look for new page files at local
      Dir.entries(@config[:data_dir]).each do |file|
        fullpath = File.join(@config[:data_dir], file)
        next if File.directory?(fullpath)
        next if file =~ /^__redsync_/
        name = Iconv.iconv("UTF-8", "UTF-8-MAC", file).first.match(/(.*)\.txt$/)[1]
        next if @stat[name]

        local_file = File.join(@config[:data_dir], "#{name}.txt")
        local_updated_at = File.stat(local_file).mtime.to_datetime
        update(name, {
          :name => name,
          :url => @config[:wiki_base_url] + "/#{name}",
          :local_file => local_file,
          :remote_updated_at => nil,
          :local_updated_at => local_updated_at,
          :downloaded_at => local_updated_at
        }, true)
      end

      write
    end


    def history(name)
      puts "--Getting page history for #{name}" if @config[:verbose]
      now = DateTime.now
      history = []
      page = @agent.get(@config[:wiki_base_url] + "/" + URI.encode(name) + "/history")
      page.search("table.wiki-page-versions tbody tr").each do |tr|
        timestamp = DateTime.parse(tr.search("td")[3].text + now.zone) 
        author_name = tr.search("td")[4].text.strip
        history << {
          :timestamp => timestamp,
          :author_name => author_name
        }
      end
      history
    end

    
    def each
      @stat.each {|k,v| yield v}
    end


    def for(name)
      @stat[name]
    end


    def update(name, hash, suspend_write = false)
      @stat[name] ||= {}
      @stat[name].merge! hash
      write unless suspend_write
    end


    def write
      File.open(@file, "w+:UTF-8") do |f|
        f.write("# DO NOT EDIT THIS FILE!\n")
        f.write(@stat.to_yaml)
      end
    end


    def new_page_names
      self.inject([]) do |sum, page|
        sum << page[:name] if !page[:remote_updated_at]
        sum
      end
    end


    def remote_updated_page_names
      self.inject([]) do |sum, page|
        if !page[:downloaded_at]
          sum << page[:name]
        elsif page[:remote_updated_at] && (page[:remote_updated_at] > page[:downloaded_at])
          sum << page[:name]
        end
        sum
      end
    end


    def local_updated_page_names
      self.inject([]) do |sum, page|
        sum << page[:name] if page[:downloaded_at] && (page[:local_updated_at] > page[:downloaded_at])
        sum
      end
    end

  end
end
